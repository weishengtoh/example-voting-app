pipeline{
    agent none

    stages{
        stage('build'){
            when{
                changeset '**/worker/**'
            }
            agent{
                docker{
                    image 'maven:3.6.1-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'Compiling worker app'
                dir('worker'){
                    sh 'mvn compile'
                }
            }
        }
        stage('test'){
            when{
                changeset '**/worker/**'
            }
            agent{
                docker{
                    image 'maven:3.6.1-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'Running unit tests on worker app'
                dir('worker'){
                    sh 'mvn clean test'
                }
            }
        }
        stage('package'){
            when{
                branch 'master'
                changeset '**/worker/**'
            }
            agent{
                docker{
                    image 'maven:3.6.1-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'Packaging worker app'
                dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }
        stage('docker-package'){
            agent any
            steps{
                echo 'Packaging worker app with Docker'
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin')
                    def workerImage = docker.build('weishengtoh/jenkins_sample:v${env.BUILD_ID}', './worker')
                    workerImage.push()
                    workerImage.push('${env.BRANCH_NAME}')
                    workerImage.push('latest')
                }
            }
        }
    }

    post{
        always{
            echo 'The pipeline run has completed...'
        }
        failure{
            slackSend(channel: 'jenkins-instavote', message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success{
            slackSend(channel: 'jenkins-instavote', message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}